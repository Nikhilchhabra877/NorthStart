[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\gjaiswal\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\gjaiswal\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.0 (Oracle Corporation Java 1.8.0_201)
[debug]       Load.loadUnit: plugins took 114.5149ms
[debug]       Load.loadUnit: defsScala took 0.2614ms
[debug] [Loading] Scanning directory C:\Users\gjaiswal\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\gjaiswal\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.7114 ms
[debug]           Load.resolveProject(global-plugins) took 42.7387ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\gjaiswal\.sbt\1.0\plugins, plugins: List(<none>))) took 82.4452ms
[debug] [Loading] Done in C:\Users\gjaiswal\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 227.3692ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1915ms
[debug]     Load.loadUnit(file:/C:/Users/gjaiswal/.sbt/1.0/plugins/, ...) took 348.255ms
[debug]   Load.apply: load took 528.8894ms
[debug]   Load.apply: resolveProjects took 7.0533ms
[debug]   Load.apply: finalTransforms took 51.3375ms
[debug]   Load.apply: config.delegates took 8.7909ms
[debug]   Load.apply: Def.make(settings)... took 403.7893ms
[debug]   Load.apply: structureIndex took 101.6263ms
[debug]   Load.apply: mkStreams took 1.6774ms
[info] loading global plugins from C:\Users\gjaiswal\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4755.6746ms
[debug]           Load.loadUnit: plugins took 28.9541ms
[debug]           Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\gjaiswal\IdeaProjects\practce-spark-scala\project
[debug]             Load.loadUnit: mkEval took 11.3413ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\gjaiswal\IdeaProjects\practce-spark-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3419 ms
[info] loading settings for project practce-spark-scala-build from idea.sbt ...
[debug]               Load.resolveProject(practce-spark-scala-build) took 2.4304ms
[debug]             Load.loadTransitive: finalizeProject(Project(id practce-spark-scala-build, base: C:\Users\gjaiswal\IdeaProjects\practce-spark-scala\project, plugins: List(<none>))) took 4.1656ms
[debug] [Loading] Done in C:\Users\gjaiswal\IdeaProjects\practce-spark-scala\project, returning: (practce-spark-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2511.4127ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.8418ms
[debug]         Load.loadUnit(file:/C:/Users/gjaiswal/IdeaProjects/practce-spark-scala/project/, ...) took 2546.0242ms
[debug]       Load.apply: load took 2547.2977ms
[debug]       Load.apply: resolveProjects took 0.1114ms
[debug]       Load.apply: finalTransforms took 9.66ms
[debug]       Load.apply: config.delegates took 0.3447ms
[debug]       Load.apply: Def.make(settings)... took 68.2758ms
[debug]       Load.apply: structureIndex took 22.7387ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\gjaiswal\IdeaProjects\practce-spark-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9853.0463ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\gjaiswal\IdeaProjects\practce-spark-scala
[debug]       Load.loadUnit: mkEval took 0.3635ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\gjaiswal\IdeaProjects\practce-spark-scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.9187 ms
[info] loading settings for project practce-spark-scala from build.sbt ...
[debug]         Load.resolveProject(practce-spark-scala) took 53.3785ms
[debug]       Load.loadTransitive: finalizeProject(Project(id practce-spark-scala, base: C:\Users\gjaiswal\IdeaProjects\practce-spark-scala, plugins: List(<none>))) took 58.8928ms
[debug] [Loading] Done in C:\Users\gjaiswal\IdeaProjects\practce-spark-scala, returning: (practce-spark-scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 1429.7619ms
[debug]     Load.loadUnit: cleanEvalClasses took 18.0472ms
[debug]   Load.loadUnit(file:/C:/Users/gjaiswal/IdeaProjects/practce-spark-scala/, ...) took 11301.8377ms
[debug] Load.apply: load took 11303.8128ms
[debug] Load.apply: resolveProjects took 0.1381ms
[debug] Load.apply: finalTransforms took 43.4659ms
[debug] Load.apply: config.delegates took 0.4138ms
[debug] Load.apply: Def.make(settings)... took 83.5105ms
[debug] Load.apply: structureIndex took 26.3277ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to practice-spark-scala (in build file:/C:/Users/gjaiswal/IdeaProjects/practce-spark-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65034 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65034, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to practice-spark-scala (in build file:/C:/Users/gjaiswal/IdeaProjects/practce-spark-scala/)
[debug] > Exec(idea-shell, None, None)
